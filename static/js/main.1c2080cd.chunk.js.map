{"version":3,"sources":["components/Dropdown/Dropdown.js","components/CountryList/CountryList.js","components/ContinentList/ContinentList.js","components/Home/Home.js","components/About/About.js","App.js","reportWebVitals.js","index.js","components/CountryList/CountryList.module.css"],"names":["Dropdown","options","initial","selectionChanged","selectedLabelChanged","useState","selectedOption","setSelectedOption","className","value","onChange","e","target","val","find","f","label","map","o","name","CountryList","ccode","cname","countries","items","config","sortConfig","setSortConfig","React","useMemo","sortableItems","sort","a","b","key","direction","requestSort","useSortableData","getClassNamesFor","undefined","handleSort","getAttribute","scople","onClick","styles","length","d","country","code","emoji","native","currency","capital","phone","languages","l","join","ContinentList","continents","selectedContinent","selectedCity","filter","c","selected","Home","setSelected","city","setCity","useQuery","fetch","method","headers","body","JSON","stringify","query","then","response","status","Error","json","data","isLoading","error","message","class","type","placeholder","el","for","s","console","log","flatMap","seletedCity","About","App","style","to","path","Users","Apollo","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","client","QueryClient","ReactDOM","render","StrictMode","QueryClientProvider","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.1c2080cd.chunk.js","sourcesContent":["import { useState } from 'react'\n\nexport const Dropdown = ({\n    options,\n    initial,\n    selectionChanged,\n    selectedLabelChanged,\n}) => {\n    const [selectedOption, setSelectedOption] = useState(initial);\n    const handleChange = (e) => {\n        setSelectedOption(e.target.value)\n        //console.log('selected', e.target.value)\n        const val = e.target.value;\n        typeof selectionChanged === 'function' && selectionChanged(val)\n        typeof selectedLabelChanged === 'function' && selectedLabelChanged(options.find(f=>f.value===val).label);\n    }\n    return (\n        <select className='form-control mx-3'\n            value={selectedOption}\n            onChange={handleChange}>\n            {options.map(o => (\n                <option key={o.value} value={o.value} name={o.label}>{o.label}</option>\n            ))}\n        </select>\n    );\n};\n\n","import styles from './CountryList.module.css'\nimport React, { useState } from 'react'\n\n// sortable? https://www.smashingmagazine.com/2020/03/sortable-tables-react/\nconst useSortableData = (items, config = null) => {\n    const [sortConfig, setSortConfig] = useState(config);\n\n    const sortedItems = React.useMemo(() => {\n        let sortableItems = [...items];\n        if (sortConfig !== null) {\n            sortableItems.sort((a, b) => {\n                if (a[sortConfig.key] < b[sortConfig.key]) {\n                    return sortConfig.direction === 'ascending' ? -1 : 1;\n                }\n                if (a[sortConfig.key] > b[sortConfig.key]) {\n                    return sortConfig.direction === 'ascending' ? 1 : -1;\n                }\n                return 0;\n            });\n        }\n        return sortableItems;\n    }, [items, sortConfig]);\n\n    const requestSort = (key) => {\n        let direction = 'ascending';\n        if (\n            sortConfig &&\n            sortConfig.key === key &&\n            sortConfig.direction === 'ascending'\n        ) {\n            direction = 'descending';\n        }\n        setSortConfig({ key, direction });\n    };\n\n    return { items: sortedItems, requestSort, sortConfig };\n};\n\n\nconst CountryList = ({ ccode, cname, countries }) => {\n    //const [sortedField, setSortedField] = useState(null);\n    const { items, requestSort, sortConfig } = useSortableData(countries);\n    const getClassNamesFor = (name) => {\n        if (!sortConfig) {\n            return;\n        }\n        return sortConfig.key === name ? sortConfig.direction : undefined;\n    };\n    const handleSort = e => {\n        requestSort(e.target.getAttribute('name'))\n    }\n    // const handleSort = (e) => {\n    //     e.preventDefault();\n    //     // For an <input> element, id,name,type etc are valid. \n    //     // For <li> tag the property name is not a valid one, hence e.target.name is undefined.\n    //     var f = e.target.getAttribute('name');\n    //     setSortedField(f)\n    // }\n\n    // let sortedCountries = [...countries];\n    // if (sortedCountries !== null) {\n    //     sortedCountries.sort((a, b) => {\n    //         if (a[sortedField] < b[sortedField]) {\n    //             return -1;\n    //         }\n    //         if (a[sortedField] > b[sortedField]) {\n    //             return 1;\n    //         }\n    //         return 0;\n    //     })\n    // }\n    return (\n        <>\n            <thead className=\"thead-dark\">\n                <tr>\n                    <th scople='col' name='code' onClick={handleSort} className={styles[getClassNamesFor('code')]}>code</th>\n                    <th scople='col' name='emoji' onClick={handleSort} className={styles[getClassNamesFor('emoji')]}>emoji</th>\n                    <th scople='col' name='name' onClick={handleSort} className={styles[getClassNamesFor('name')]}>name</th>\n                    <th scople='col' name='native' onClick={handleSort} className={styles[getClassNamesFor('native')]}>native</th>\n                    <th scople='col' name='ccy' onClick={handleSort} className={styles[getClassNamesFor('ccy')]}>ccy</th>\n                    <th scople='col' name='capital' onClick={handleSort} className={styles[getClassNamesFor('capital')]}>capital</th>\n                    <th scople='col' name='phone' onClick={handleSort} className={styles[getClassNamesFor('phone')]}>phone</th>\n                    <th scople='col' name='languages' onClick={handleSort} className={styles[getClassNamesFor('languages')]}>languages</th>\n                    <th scople='col' name='continent' onClick={handleSort} className={styles[getClassNamesFor('continent')]}>continent</th>\n                    <th scople='col' name='ccode' onClick={handleSort} className={styles[getClassNamesFor('ccode')]}>code</th>\n                </tr>\n            </thead>\n            <tbody>\n                {countries && countries.length > 0 &&\n                    items.map(d => {\n                        //console.log(d);\n                        return (\n                            <tr className={styles.country} key={d.code}>\n                                <td>{d.code}</td>\n                                <td>{d.emoji}</td>\n                                <td>{d.name}</td>\n                                <td>{d.native}</td>\n                                <td>{d.currency}</td>\n                                <td>{d.capital}</td>\n                                <td>{d.phone}</td>\n                                <td>{d.languages && d.languages.map(l => l.name).join('/')}</td>\n                                <td>{ccode}</td>\n                                <td>{cname}</td>\n                            </tr>\n                        )\n                    })\n                }\n            </tbody>\n        </>\n    )\n}\n\nexport default CountryList;","import React from 'react'\nimport CountryList from '../CountryList/CountryList';\n\nconst ContinentList = ({\n    continents,\n    selectedContinent,\n    selectedCity\n}) => {\n    return (\n        <div>\n            <table className=\"table table-sm table-stripped table-dark table-hover\">\n                {continents && continents.filter(c=>c.code===selectedContinent).map(c =>\n                    <CountryList ccode={c.code} cname={c.name} countries={c.countries} selected={selectedCity} />\n                )}\n                {!continents && <div>No continents</div>}\n            </table>\n        </div>\n    )\n}\n\nexport default ContinentList;","import { Dropdown } from '../Dropdown/Dropdown';\nimport React, { useState } from 'react'\nimport { useQuery } from 'react-query'\nimport ContinentList from '../ContinentList/ContinentList'\n\nconst endpoint = \"https://countries.trevorblades.com\"\nconst FILMS_QUERY = `\n  {\n    continents{\n        code name countries { \n            code emoji name native capital currency phone\n            languages {name native code} \n        } \n    }\n  }\n`;\n\n// continents(filter:{ code:{eq:\"AS\"}}) {name}\n\nconst Home = () => {\n    const [selected, setSelected] = useState('AS')\n    const [city, setCity] = useState()\n    const { data, isLoading, error } = useQuery(\"launches\", () => {\n        return fetch(endpoint, {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({ query: FILMS_QUERY })\n        }).then(response => {\n            if (response.status >= 400) {\n                throw new Error(\"Error fetching data\");\n            } else {\n                return response.json();\n            }\n        }).then(json => json.data)\n    })\n\n\n    if (isLoading) return \"Loading...\";\n    if (error) return <pre>{error.message}</pre>;\n\n    const selectionChanged = s => {\n        console.log('selected', s)\n        setSelected(s)\n    }\n\n    return (\n        // fluid for widh: 100%\n        <div className=\"container-fluid\">\n            <div className=\"row\">\n                <div className=\"col\">\n                    <h2 className='text-center m-4'>Countries [{selected}] by useQuery hook</h2>\n                </div>\n            </div>\n            <div className=\"row\" >\n                <div className=\"col-3\">\n                    <div class='input-group mb-3'>\n                        <div className=\"input-group-prepend\">\n                            <button className=\"btn btn-outline-primary\" type=\"button\">filter</button>\n                        </div>\n                        <input type='text' className='form-control' placeholder=\"filter by\" value={city}></input>\n                    </div>\n                </div>\n                <div className=\"col-9\" >\n                    <div className='form-group form-inline'>\n                        <label el className='mx-3' for='selector'>Continents</label>\n                        {\n                            data && data.continents && data.continents.length > 0 &&\n                            <Dropdown options={data.continents.map(o => { return { \"value\": o.code, \"label\": o.name } })}\n                                initial={selected}\n                                selectionChanged={selectionChanged} />\n                        }\n                        <div className=\"mr-2\">==&gt;</div>\n                        <select name=\"selector\" class=\"form-control\" value={selected}>\n                            {data && data.continents && data.continents.map(o => <option value={o.code}>{o.name}</option>)}\n                        </select>\n                        <div className=\"mr-2\">==&gt;</div>\n                        {\n                            data && data.continents && data.continents.length > 0 &&\n                            <Dropdown\n                                selectedLabelChanged={setCity}\n                                options={\n                                    data.continents\n                                        .filter(o => o.code === selected)\n                                        .flatMap(c => c.countries) //selectMany!\n                                        .map(o => { return { \"value\": o.code, \"label\": o.name } })}\n                            />\n                        }\n                    </div>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col\">\n                    {console.log(data.continents)}\n                    {data && data.continents && data.continents.length > 0 &&\n                        <ContinentList continents={data.continents} selectedContinent={selected} seletedCity={city} />}\n                    {!data && <div>no data...</div>}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Home;","export const About = () => {\n    return (\n        <>\n            <h2 className=\"text-center\">About</h2>\n            <div>\n                several approach to fetch data via GraphQL\n            <ul>\n                    <li>apollo</li>\n                    <li>fetch</li>\n                    <li>axiom</li>\n                </ul>\n            </div>\n        </>\n    )\n}","import './App.css';\nimport Home from './components/Home/Home'\n\nimport React from \"react\";\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport { About } from './components/About/About';\n\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <nav className='navbar navbar-expand-lg navbar-light bg-success navbar-full' style={{ \"backgroundColor\": \"orange\", \"fontWeight\": \"bold\" }}>\n          <ul className='navbar-nav'>\n            <Link to=\"/\" className='nav-item nav-link m-1'>UseQuery</Link>\n            <Link to=\"/apollo\" className='nav-item nav-link m-1'>Apollo</Link>\n            <Link to=\"/users\" className='nav-item nav-link m-1'>Users</Link>\n            <Link to=\"/about\" className='nav-item nav-link m-1'>About</Link>\n          </ul>\n        </nav>\n\n        {/* A <Switch> looks through its children <Route>s and\n          renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/users\">\n            <Users />\n          </Route>\n          <Route path=\"/apollo\">\n            <Apollo />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n\n  function Apollo() {\n    return <h2>Apollo</h2>;\n  }\n\n  function Users() {\n    return <h2>Axiom</h2>;\n  }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { QueryClient, QueryClientProvider } from \"react-query\";\n\nconst client = new QueryClient();\n\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client={client}>\n      <App />\n    </QueryClientProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ascending\":\"CountryList_ascending__21XMM\",\"descending\":\"CountryList_descending__3Z7Dg\"};"],"sourceRoot":""}