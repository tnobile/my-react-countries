{"version":3,"sources":["components/CountryList/CountryList.js","components/ContinentList/ContinentList.js","components/Home/Home.js","App.js","reportWebVitals.js","index.js","components/CountryList/CountryList.module.css"],"names":["CountryList","ccode","cname","countries","useState","items","config","React","sortConfig","setSortConfig","useMemo","sortableItems","sort","a","b","key","direction","requestSort","useSortableData","getClassNamesFor","name","undefined","handleSort","e","target","getAttribute","className","scople","onClick","styles","length","map","d","country","code","emoji","native","currency","capital","phone","languages","l","join","ContinentList","continents","c","Home","useQuery","fetch","method","headers","body","JSON","stringify","query","then","response","status","Error","json","data","isLoading","error","message","console","log","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","client","QueryClient","ReactDOM","render","StrictMode","QueryClientProvider","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.0bdb7bbd.chunk.js","sourcesContent":["import styles from './CountryList.module.css'\nimport React, { useState } from 'react'\n\n// sortable? https://www.smashingmagazine.com/2020/03/sortable-tables-react/\nconst useSortableData = (items, config = null) => {\n    const [sortConfig, setSortConfig] = React.useState(config);\n  \n    const sortedItems = React.useMemo(() => {\n      let sortableItems = [...items];\n      if (sortConfig !== null) {\n        sortableItems.sort((a, b) => {\n          if (a[sortConfig.key] < b[sortConfig.key]) {\n            return sortConfig.direction === 'ascending' ? -1 : 1;\n          }\n          if (a[sortConfig.key] > b[sortConfig.key]) {\n            return sortConfig.direction === 'ascending' ? 1 : -1;\n          }\n          return 0;\n        });\n      }\n      return sortableItems;\n    }, [items, sortConfig]);\n  \n    const requestSort = (key) => {\n      let direction = 'ascending';\n      if (\n        sortConfig &&\n        sortConfig.key === key &&\n        sortConfig.direction === 'ascending'\n      ) {\n        direction = 'descending';\n      }\n      setSortConfig({ key, direction });\n    };\n  \n    return { items: sortedItems, requestSort, sortConfig };\n  };\n  \n\nconst CountryList = ({ ccode, cname, countries }) => {\n    const [sortedField, setSortedField] = useState(null);\n    const { items, requestSort, sortConfig } = useSortableData(countries);\n    const getClassNamesFor = (name) => {\n      if (!sortConfig) {\n        return;\n      }\n      return sortConfig.key === name ? sortConfig.direction : undefined;\n    };\n    const handleSort = e => {\n        requestSort(e.target.getAttribute('name'))\n    }\n    // const handleSort = (e) => {\n    //     e.preventDefault();\n    //     // For an <input> element, id,name,type etc are valid. \n    //     // For <li> tag the property name is not a valid one, hence e.target.name is undefined.\n    //     var f = e.target.getAttribute('name');\n    //     setSortedField(f)\n    // }\n\n    // let sortedCountries = [...countries];\n    // if (sortedCountries !== null) {\n    //     sortedCountries.sort((a, b) => {\n    //         if (a[sortedField] < b[sortedField]) {\n    //             return -1;\n    //         }\n    //         if (a[sortedField] > b[sortedField]) {\n    //             return 1;\n    //         }\n    //         return 0;\n    //     })\n    // }\n    return (\n        <>\n            <thead className=\"thead-dark\">\n                <tr>\n                    <th scople='col' name='code' onClick={handleSort} className={styles[getClassNamesFor('code')]}>code</th>\n                    <th scople='col' name='emoji' onClick={handleSort} className={styles[getClassNamesFor('emoji')]}>emoji</th>\n                    <th scople='col' name='name' onClick={handleSort} className={styles[getClassNamesFor('name')]}>name</th>\n                    <th scople='col' name='native' onClick={handleSort} className={styles[getClassNamesFor('native')]}>native</th>\n                    <th scople='col' name='ccy' onClick={handleSort} className={styles[getClassNamesFor('ccy')]}>ccy</th>\n                    <th scople='col' name='capital' onClick={handleSort} className={styles[getClassNamesFor('capital')]}>capital</th>\n                    <th scople='col'>phone</th>\n                    <th scople='col' name='languages' onClick={handleSort} className={styles[getClassNamesFor('languages')]}>languages</th>\n                    <th scople='col' name='continent' onClick={handleSort} className={styles[getClassNamesFor('continent')]}>continent</th>\n                    <th scople='col'>ccode</th>\n                </tr>\n            </thead>\n            <tbody>\n                {countries && countries.length > 0 &&\n                    items.map(d => {\n                        //console.log(d);\n                        return (\n                            <tr className={styles.country} key={d.code}>\n                                <td>{d.code}</td>\n                                <td>{d.emoji}</td>\n                                <td>{d.name}</td>\n                                <td>{d.native}</td>\n                                <td>{d.currency}</td>\n                                <td>{d.capital}</td>\n                                <td>{d.phone}</td>\n                                <td>{d.languages && d.languages.map(l => l.name).join('/')}</td>\n                                <td>{ccode}</td>\n                                <td>{cname}</td>\n                            </tr>\n                        )\n                    })\n                }\n            </tbody>\n        </>\n    )\n}\n\nexport default CountryList;","import React from 'react'\nimport CountryList from '../CountryList/CountryList';\n\nconst ContinentList = ({ continents }) => {\n    return (\n        <div>\n            <table className=\"table table-sm table-stripped table-dark table-hover\">\n                {continents && continents.map(c =>\n                    <CountryList ccode={c.code} cname={c.name} countries={c.countries} />\n                )}\n                {!continents && <div>No continents</div>}\n            </table>\n        </div>\n    )\n}\n\nexport default ContinentList;","import React from 'react'\nimport { useQuery } from 'react-query'\nimport ContinentList from '../ContinentList/ContinentList'\nimport CountryList from '../CountryList/CountryList'\n\nimport styles from './Home.module.css'\n\nconst endpoint = \"https://countries.trevorblades.com\"\nconst FILMS_QUERY = `\n  {\n    continents(filter:{code:{eq:\"AS\"}}) {\n        code name countries { \n            code emoji name native capital currency phone\n            languages {name native code} \n        } \n    }\n  }\n`;\n\n// continents(filter:{ code:{eq:\"AS\"}}) {name}\n\nconst Home = () => {\n    const { data, isLoading, error } = useQuery(\"launches\", () => {\n        return fetch(endpoint, {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({ query: FILMS_QUERY })\n        })\n            .then(response => {\n                if (response.status >= 400) {\n                    throw new Error(\"Error fetching data\");\n                } else {\n                    return response.json();\n                }\n            })\n            .then(json => json.data)\n    })\n\n    if (isLoading) return \"Loading...\";\n    if (error) return <pre>{error.message}</pre>;\n\n    return (\n        <>\n            <h3>Home</h3>\n            {console.log(data.continents)}\n            {data && data.continents && data.continents.length > 0 &&\n                <ContinentList continents={data.continents} />}\n            {!data && <div>no data...</div>}\n            <div>End</div>\n        </>\n    )\n}\n\nexport default Home;","import './App.css';\nimport Home from './components/Home/Home'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { QueryClient, QueryClientProvider } from \"react-query\";\n\nconst client = new QueryClient();\n\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client={client}>\n      <App />\n    </QueryClientProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ascending\":\"CountryList_ascending__21XMM\",\"descending\":\"CountryList_descending__3Z7Dg\"};"],"sourceRoot":""}